{"version":3,"sources":["constants/index.js","state/slice.js","state/store.js","serviceWorker.js","components/SearchBar.js","routes/Home.js","components/RestaurantCard.js","components/SearchResults.js","routes/Results.js","index.js"],"names":["PRICES","restaurantSlice","createSlice","name","initialState","availableRestaurants","filter","city","isFetching","error","reducers","setRestaurants","state","action","payload","setCity","setError","setFetching","setFilter","actions","selectRestaurants","restaurantSearch","restaurant","toLowerCase","includes","address","area","selectError","configureStore","reducer","restaurantReducer","Boolean","window","location","hostname","match","SearchBar","label","onSubmit","ctaText","ariaLabel","placeholder","useState","value","setValue","e","preventDefault","for","id","onChange","target","type","aria-label","Home","history","dispatch","useDispatch","useSelector","className","a","axios","get","OPEN_TABLE_ROOT","params","res","restaurants","data","length","push","fetchRestaurants","aria-live","RestaurantCard","imgSrc","price","reserveUrl","src","alt","aria-hidden","repeat","href","SearchResults","map","image_url","reserve_url","key","Results","to","ReactDOM","render","StrictMode","store","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2ead5ceb.chunk.js","sourcesContent":["export const OPEN_TABLE_ROOT = 'http://opentable.herokuapp.com/api';\n\nexport const PRICES = [\n  'inexpensive',\n  'average',\n  'moderately expensive',\n  'expensive',\n];\n","import { createSlice } from '@reduxjs/toolkit';\nimport { OPEN_TABLE_ROOT } from '../constants/';\nimport axios from 'axios';\n\nexport const restaurantSlice = createSlice({\n  name: 'restaurantSearch',\n  initialState: {\n    availableRestaurants: [],\n    filter: '',\n    city: '',\n    isFetching: false,\n    error: '',\n  },\n  reducers: {\n    setRestaurants: (state, action) => {\n      state.availableRestaurants = action.payload;\n    },\n    setCity: (state, action) => {\n      state.city = action.payload;\n    },\n    setError: (state, action) => {\n      state.error = action.payload;\n    },\n    setFetching: (state, action) => {\n      state.isFetching = action.payload;\n    },\n    setFilter: (state, action) => {\n      state.filter = action.payload;\n    },\n  },\n});\n\nexport const {\n  setRestaurants,\n  setError,\n  setFetching,\n  setFilter,\n  setCity,\n} = restaurantSlice.actions;\n\nexport const fetchRestaurants = (city, history) => async (dispatch) => {\n  try {\n    dispatch(setFilter(''));\n    dispatch(setError(''));\n    dispatch(setFetching(true));\n    dispatch(setCity(city));\n\n    const res = await axios.get(OPEN_TABLE_ROOT + '/restaurants', {\n      params: {\n        city,\n      },\n    });\n\n    const { restaurants } = res.data;\n    dispatch(setFetching(false));\n    if (restaurants && restaurants.length > 0) {\n      dispatch(setRestaurants(restaurants));\n      return history.push('/results');\n    }\n    return dispatch(setError(`No results found for \"${city}\".`));\n  } catch {\n    dispatch(\n      setError(`Encountered a problem connecting with the OpenTable API.`)\n    );\n  }\n};\n\nexport const selectRestaurants = (state) => {\n  const { availableRestaurants, filter } = state.restaurantSearch;\n  if (!filter) return availableRestaurants;\n  return availableRestaurants.filter(\n    (restaurant) =>\n      restaurant.name.toLowerCase().includes(filter.toLowerCase()) ||\n      restaurant.address.toLowerCase().includes(filter.toLowerCase()) ||\n      restaurant.area.toLowerCase().includes(filter.toLowerCase())\n  );\n};\n\nexport const selectError = (state) => state.restaurantSearch.error;\n\nexport default restaurantSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport restaurantReducer from './slice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    restaurantSearch: restaurantReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst SearchBar = ({\n  label,\n  name,\n  onSubmit,\n  ctaText,\n  ariaLabel,\n  placeholder,\n}) => {\n  const [value, setValue] = useState('');\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    onSubmit(value);\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <label for={name}>{label}</label>\n        <input\n          id={name}\n          name={name}\n          onChange={(e) => setValue(e.target.value)}\n          placeholder={placeholder}\n          value={value}\n          type='text'\n          aria-label={ariaLabel}\n        />\n        <button>{ctaText}</button>\n      </form>\n    </div>\n  );\n};\n\nSearchBar.propTypes = {\n  name: PropTypes.string,\n  onSubmit: PropTypes.func,\n  ctaText: PropTypes.string,\n  ariaLabel: PropTypes.string,\n  placeholder: PropTypes.string,\n};\n\nexport default SearchBar;\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchRestaurants, selectError } from '../state/slice';\r\nimport SearchBar from '../components/SearchBar';\r\n\r\nconst Home = ({ history }) => {\r\n  const dispatch = useDispatch();\r\n  const error = useSelector(selectError);\r\n\r\n  return (\r\n    <header className='hero'>\r\n      <div className='card'>\r\n        <h1>RestoFinder</h1>\r\n        <p>A search engine for local restaurants using the Open Table API.</p>\r\n        <SearchBar\r\n          name='city'\r\n          label='City'\r\n          onSubmit={(value) => dispatch(fetchRestaurants(value, history))}\r\n          ctaText='Search'\r\n          ariaLabel='Enter a city to get a list of available restaurants.'\r\n          placeholder='ie. Toronto'\r\n        />\r\n        {error && (\r\n          <p className='error' aria-live='assertive'>\r\n            {error}\r\n          </p>\r\n        )}\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { PRICES } from '../constants';\n\nconst RestaurantCard = ({ imgSrc, name, address, price = 1, reserveUrl }) => {\n  return (\n    <div className='card' aria-live='polite'>\n      <img src={imgSrc} alt={`Preview of ${name}`}></img>\n      <div className='card-content'>\n        <h3>{name}</h3>\n        <p>{address}</p>\n        <p className='visually-hidden'>{`Pricing is ${PRICES[price - 1]}.`}</p>\n        <p aria-hidden='true'>\n          {'$'.repeat(price)}\n          <span className='disabled'>{'$'.repeat(4 - price)}</span>\n        </p>\n      </div>\n      <a href={reserveUrl} aria-label={`Reserve a table at ${name}.`}>\n        Reserve\n      </a>\n    </div>\n  );\n};\n\nRestaurantCard.propTypes = {\n  imgSrc: PropTypes.string,\n  name: PropTypes.string,\n  address: PropTypes.string,\n  price: PropTypes.number,\n  reserveUrl: PropTypes.string,\n};\n\nexport default RestaurantCard;\n","import React from 'react';\nimport RestaurantCard from './RestaurantCard';\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from '../state/slice';\nimport SearchBar from './SearchBar';\n\nconst SearchResults = ({ restaurants }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <div aria-live='polite'>\n      <div className='filter-bar'>\n        <div className='filter-content wrapper'>\n          <SearchBar\n            label='Filter'\n            name='refine'\n            onSubmit={(value) => dispatch(setFilter(value))}\n            ctaText='Filter'\n            ariaLabel='Refine the list of available restaurants by entering a name, address or area.'\n            placeholder='Refine the list of available restaurants.'\n          />\n          <h2 aria-live='polite'>{`${restaurants.length} Available Restaurants`}</h2>\n        </div>\n      </div>\n\n      <div className='cards-container wrapper'>\n        {restaurants.length > 0 &&\n          restaurants.map(\n            ({ image_url, reserve_url, price, name, address, id }) => (\n              <RestaurantCard\n                key={id}\n                imgSrc={image_url}\n                name={name}\n                address={address}\n                price={price}\n                reserveUrl={reserve_url}\n              />\n            )\n          )}\n      </div>\n    </div>\n  );\n};\n\nexport default SearchResults;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { selectRestaurants } from '../state/slice';\nimport SearchResults from '../components/SearchResults';\n\nconst Results = () => {\n  const restaurants = useSelector(selectRestaurants);\n  return (\n    <>\n      <header className='results-header'>\n        <div className='wrapper top-bar'>\n          <h1>RestoFinder</h1>\n          <Link to='/'>Back to Home</Link>\n        </div>\n      </header>\n      <main>\n        <SearchResults restaurants={restaurants} />\n      </main>\n    </>\n  );\n};\n\nexport default Results;\n","import 'react-app-polyfill/ie11';\r\nimport 'react-app-polyfill/stable';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport store from './state/store';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './styles/index.scss';\r\nimport Home from './routes/Home';\r\nimport Results from './routes/Results';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <Router>\r\n        <Route exact path='/' component={Home} />\r\n        <Route path='/results' component={Results} />\r\n      </Router>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}